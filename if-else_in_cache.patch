diff --git a/lib/Router/PathInfo.pm b/lib/Router/PathInfo.pm
index a9f6534..f07e827 100644
--- a/lib/Router/PathInfo.pm
+++ b/lib/Router/PathInfo.pm
@@ -121,11 +121,30 @@ sub new {
     my $self = bless {
         static      => UNIVERSAL::isa($param->{static}, 'HASH')     ? Router::PathInfo::Static->new(%{delete $param->{static}}) : undef,
         controller  => UNIVERSAL::isa($param->{controller}, 'HASH') ? Router::PathInfo::Controller->new(%{delete $param->{controller}}) : Router::PathInfo::Controller->new(),
-        cacher      => {},
-        cache_counter => 0,
-        cache_limit => 100
+        # ugly, but performance
+        cacher                  => {
+            static              => {},
+            controller          => {},
+            simple_controller   => {},
+            error               => {}
+        },
+        cache_static_limit      => 200,
+        cache_static_cnt        => 0,
+        cache_controller_limit  => 200,
+        cache_controller_cnt    => 0,
+        cache_error_limit       => 100,
+        cache_error_cnt         => 0
     }, $class;
     
+    # override default value for cache
+    if (ref $param->{cache} eq 'HASH') {
+        for ('static','controler', 'error') {
+            if (defined $param->{cache}->{$_} and $param->{cache}->{$_} =~ /^\d+$/) {
+                $self->{"cache_${_}_limit"} = $param->{cache}->{$_}; 
+            }
+        }
+    }
+    
     $singleton = $self if $as_singletone;
      
     return $self;
@@ -140,7 +159,9 @@ sub add_rule {
     my $self = shift;
     my $ret = 0;
     if ($self->{controller}) {
-        $self->{cache_counter} = 0;
+        $self->{cache_static_cnt} = 0;
+        $self->{cache_controller_cnt} = 0;
+        $self->{cache_error_cnt} = 0;
         $self->{cacher} = {};
         $self->{controller}->add_rule(@_);
     } else {
@@ -201,9 +222,19 @@ sub match {
       desc  => '$env->{PATH_INFO} not defined'  
     } unless $env->{PATH_INFO};
     
+    # find in cache
     my $cache_key = join('#',$env->{PATH_INFO}, $env->{REQUEST_METHOD});
-    my $cache_match = $self->{cacher}->{$cache_key};
-    return $cache_match if $cache_match;
+    my $cache_match;
+    # 'if-else' faster than 'for'
+    if ($cache_match = $self->{cacher}->{static}->{$cache_key}) {
+        return $cache_match;
+    } elsif ($cache_match = $self->{cacher}->{controller}->{$cache_key}) {
+        return $cache_match;
+    } elsif ($cache_match = $self->{cacher}->{simple_controller}->{$cache_key}) {
+        return $cache_match;
+    } elsif ($cache_match = $self->{cacher}->{error}->{$cache_key}) {
+        return $cache_match;
+    };
     
     my @segment = split '/', $env->{PATH_INFO}, -1; shift @segment;
     $env->{'psgix.tmp.RouterPathInfo'} = {
@@ -217,9 +248,11 @@ sub match {
     }
     
     # check in controllers
+    # $was_a_re - match with regexp
+    my $was_a_re = 0;
     if (not $match and $self->{controller}) {
-        $match = $self->{controller}->match($env);
-    }    
+        ($was_a_re, $match) = $self->{controller}->match($env);
+    }
     
     # not found?
     $match ||= {
@@ -230,13 +263,36 @@ sub match {
     
     delete $env->{'psgix.tmp.RouterPathInfo'};
     
-    if ($self->{cache_counter} > $self->{cache_limit}) {
-        $self->{cache_counter} = 0;
-        $self->{cacher} = {};
-    } else {
-        $self->{cache_counter}++;
+    # cache!
+    if ($match->{type} eq 'static' and $self->{cache_static_limit}) {
+        if ($self->{cache_static_cnt} > $self->{cache_static_limit}) {
+            $self->{cache_static_cnt} = 0;
+            $self->{cacher}->{static} = {};
+        } else {
+            $self->{cache_static_cnt}++;
+        }
+        $self->{cacher}->{static}->{$cache_key} = $match;
+    } elsif ($match->{type} eq 'controller' and $self->{cache_controller_limit}) {
+        unless ($was_a_re) {
+            $self->{cacher}->{simple_controller}->{$cache_key} = $match;
+        } else {
+            if ($self->{cache_controller_cnt} > $self->{cache_controller_limit}) {
+                $self->{cache_controller_cnt} = 0;
+                $self->{cacher}->{controller} = {};
+            } else {
+                $self->{cache_controller_cnt}++;
+            }
+            $self->{cacher}->{controller}->{$cache_key} = $match;
+        }
+    } elsif ($match->{type} eq 'error' and $self->{cache_error_limit}) {
+        if ($self->{cache_error_cnt} > $self->{cache_error_limit}) {
+            $self->{cache_error_cnt} = 0;
+            $self->{cacher}->{error} = {};
+        } else {
+            $self->{cache_error_cnt}++;
+        }
+        $self->{cacher}->{error}->{$cache_key} = $match;
     }
-    $self->{cacher}->{$cache_key} = $match; 
     
     # match is done
     return $match;
diff --git a/lib/Router/PathInfo/Controller.pm b/lib/Router/PathInfo/Controller.pm
index 7f9409d..0dce52f 100644
--- a/lib/Router/PathInfo/Controller.pm
+++ b/lib/Router/PathInfo/Controller.pm
@@ -207,26 +207,27 @@ sub add_rule {
 sub _match {
     my ($self, $reserch, $size_el, @el) = @_;
     my $ret;
+    my $was_a_re = 0;
     my $segment = shift @el;
     $size_el--;
     my $exactly = $reserch->{exactly}->{$segment};
     if (defined $exactly) {
-        $ret = $size_el ? $self->_match($exactly, $size_el, @el) : $exactly->{match};
-        return $ret if $ret; 
+        ($ret, $was_a_re) = $size_el ? $self->_match($exactly, $size_el, @el) : $exactly->{match};
+        return ($ret, $was_a_re) if $ret; 
     };
     
     if ($reserch->{regexp}) {
         for (keys %{$reserch->{regexp}}) {
             if ($segment =~ $self->{re_compile}->{$_}) {
-                $ret = $size_el ? $self->_match($reserch->{regexp}->{$_}, $size_el, @el) : $reserch->{regexp}->{$_}->{match};
-                return $ret if $ret;
+                ($ret) = $size_el ? $self->_match($reserch->{regexp}->{$_}, $size_el, @el) : $reserch->{regexp}->{$_}->{match};
+                return ($ret, 1) if $ret;
             };
         }
     };
     
     if ($reserch->{default}) {
-        $ret = $size_el ? $self->_match($reserch->{default}->{''}, $size_el, @el) : $reserch->{default}->{''}->{match};
-        return $ret if $ret;
+        ($ret, $was_a_re) = $size_el ? $self->_match($reserch->{default}->{''}, $size_el, @el) : $reserch->{default}->{''}->{match};
+        return ($ret, $was_a_re) if $ret;
     }
     
     return;
@@ -253,7 +254,7 @@ sub match {
     
     my $depth = $env->{'psgix.tmp.RouterPathInfo'}->{depth};
     
-    my $match = $self->_match(
+    my ($match, $was_a_re) = $self->_match(
         $self->{rule}->{$env->{REQUEST_METHOD}}->{$depth}, 
         $depth, 
         @{$env->{'psgix.tmp.RouterPathInfo'}->{segments}}
@@ -266,9 +267,9 @@ sub match {
             segment => $match->[1] ? [map {$env->{'psgix.tmp.RouterPathInfo'}->{segments}->[$_]} @{$match->[1]}] : [] 
         };
     	if ($match->[2]) {
-    		return $match->[2]->($ret,$env); 
+    		return ($was_a_re, $match->[2]->($ret,$env)); 
     	} else {
-    		return $ret;
+    		return ($was_a_re, $ret);
     	}
     } else {
     	return;
